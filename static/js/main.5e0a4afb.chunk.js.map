{"version":3,"sources":["routes/Home.js","components/Card.js","components/List.js","components/Board.js","routes/BoardPage.js","App.js","index.js"],"names":["ADD","DELETE","PIN","PALETTE","Home","boardList","functionSet","useState","text","setText","deleteBoard","key","remove","Container","BoardsWrapper","Title","Boards","map","board","pin","BoardLink","boardKey","ToBoard","to","pathname","boardName","state","name","Button","onClick","togglePin","className","BoardAdder","BoardInput","type","value","onChange","e","target","placeholder","preventDefault","create","createNewBoard","styled","button","Input","input","h2","Link","div","Card","listKey","cardKey","content","done","ICON","Cardtext","CardButton","toggleDone","props","List","listName","cardList","nextListName","setNextListName","nextListNameRef","useRef","ListContainer","StyledEditable","innerRef","html","disabled","onBlur","current","innerHTML","edit","spellCheck","onKeyPress","keyCode","which","returnValue","droppableId","provided","ScrollView","ref","droppableProps","card","index","draggableId","snapshot","CardWrapper","draggableProps","dragHandleProps","isDragging","CardAdder","CardInput","createNewCard","ContentEditable","Board","listList","BoardContainer","onDragEnd","result","destination","source","switchIndex","direction","ListField","list","ListWrapper","ListAdder","ListInput","createNewList","BoardPage","location","history","find","nextBoardName","setNextBoardName","nextBoardNameRef","undefined","push","BoardPageWrapper","Header","BoardTitle","ToHome","h1","header","GlobalStyle","createGlobalStyle","App","React","JSON","parse","localStorage","getItem","setBoardList","useEffect","setItem","stringify","filter","length","newBoardList","concat","Date","now","forEach","context","startListKey","endListKey","startIndex","endIndex","dragCard","dragList","splice","path","exact","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5e0a4afb.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport const ADD = 'fas fa-plus';\r\nexport const DELETE = \"fas fa-trash\";\r\nconst PIN = \"fas fa-thumbtack\";\r\nexport const PALETTE = ['#E9ECE5', '#C0DFD9', '#B3C2BF', '#3B3A36'];\r\nexport const EMPTY =  '---';\r\n\r\nexport default function Home({boardList, functionSet}){\r\n    const [text, setText] = useState(\"\");\r\n    const createNewBoard = text => {\r\n        functionSet.create(EMPTY, EMPTY, text);\r\n    };\r\n    const deleteBoard = key => {\r\n        functionSet.remove(key, EMPTY, EMPTY);\r\n    };\r\n    const onChange = e =>{\r\n        setText(e.target.value);\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        createNewBoard(text);\r\n        setText(\"\");\r\n    };\r\n    return(\r\n        <Container>\r\n            <BoardsWrapper>\r\n                <Title>Pinned Boards</Title> \r\n                <Boards>  \r\n                {boardList.map(board => (\r\n                    board.pin ? (\r\n                        <BoardLink key={board.boardKey}>\r\n                            <ToBoard to={{\r\n                                pathname: `/board/${board.boardName}-board`,\r\n                                state:{\r\n                                    key: board.boardKey,\r\n                                    name: board.boardName\r\n                                }\r\n                            }}>\r\n                                {board.boardName}\r\n                            </ToBoard>\r\n                            <Button onClick={() => functionSet.togglePin(board.boardKey)}><i className={PIN}></i></Button>\r\n                            <Button onClick={() => deleteBoard(board.boardKey)}><i className={DELETE}></i></Button>\r\n                        </BoardLink>\r\n                    ) : null\r\n                ))}\r\n                </Boards>   \r\n            </BoardsWrapper> \r\n            <BoardsWrapper>\r\n                <Title>Boards</Title> \r\n                <Boards>  \r\n                {boardList.map(board => (\r\n                    <BoardLink key={board.boardKey}>\r\n                        <ToBoard to={{\r\n                            pathname: `/board/${board.boardName}-board`,\r\n                            state:{\r\n                                key: board.boardKey,\r\n                                name: board.boardName\r\n                            }\r\n                        }}>\r\n                            {board.boardName}\r\n                        </ToBoard>\r\n                        <Button onClick={() => functionSet.togglePin(board.boardKey)}><i className={PIN}></i></Button>\r\n                        <Button onClick={() => deleteBoard(board.boardKey)}><i className={DELETE}></i></Button>\r\n                    </BoardLink>\r\n                ))}\r\n                <BoardAdder>\r\n                    <BoardInput type=\"text\" value={text} onChange={onChange} placeholder='Add a board..'/>\r\n                    <Button onClick={onSubmit}><i className={ADD}></i></Button>\r\n                </BoardAdder>\r\n                </Boards>   \r\n            </BoardsWrapper>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background: none;\r\n    &:hover{\r\n        color: ${PALETTE[2]};\r\n    }\r\n    cursor: pointer;\r\n    color: ${PALETTE[3]};    \r\n`;\r\n\r\nexport const Input = styled.input`\r\n    border: none;\r\n    padding: 5px;\r\n    background: none;\r\n    font-family: 'Lora', 'Noto Serif KR';\r\n    &::placeholder{\r\n        color: ${PALETTE[2]};\r\n    }\r\n    outline-color: ${PALETTE[3]};\r\n`;\r\n\r\nconst Title = styled.h2`\r\n    color: ${PALETTE[3]};\r\n`;\r\n\r\nconst BoardInput = styled(Input)`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n    width: 100%;\r\n    margin: auto 0;\r\n`;\r\n\r\nconst ToBoard = styled(Link)`\r\n    color: ${PALETTE[3]};\r\n    text-decoration: none;\r\n    &:hover{\r\n        color: ${PALETTE[2]};\r\n    }\r\n    margin: auto;\r\n    font-weight: bold;\r\n    word-wrap: break-word;\r\n    word-break: break-word;\r\n    text-align: center;\r\n`;\r\n\r\nconst BoardAdder = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    margin: 10px;\r\n    padding: 20px;\r\n    border-radius: 20px;\r\n    width: 200px;\r\n    height: 80px;\r\n    background-color: white;\r\n`;\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 40px;\r\n`;\r\n\r\nconst BoardLink = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 10px;\r\n    padding: 20px;\r\n    border-radius: 20px;\r\n    width: 200px;\r\n    height: 80px;\r\n    background-color: white;\r\n`;\r\n\r\nconst Boards = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n`;\r\n\r\nconst BoardsWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    align-items: center;\r\n    border-radius: 20px;\r\n    background-color: ${PALETTE[1]};\r\n    margin: 10px 0;\r\n`;\r\n\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Button, PALETTE} from '../routes/Home';\r\n\r\nconst CHECK = \"fas fa-check\";\r\nconst DONE = \"fas fa-times\";\r\n\r\nexport default function Card({ boardKey, listKey, cardKey, content, done, functionSet }){\r\n    const ICON = done ? DONE : CHECK;\r\n    return (\r\n        <>\r\n            <Cardtext done={done}>{content}</Cardtext>\r\n            <CardButton done={done} onClick={()=>functionSet.toggleDone(boardKey, listKey, cardKey)}><i className={ICON}></i></CardButton>\r\n        </>\r\n    );\r\n}\r\n\r\nconst Cardtext = styled.div`\r\n    width: 100%;\r\n    padding: 5px;\r\n    text-align: left;\r\n    font-size: 14px;\r\n    text-decoration: ${props => (props.done ? 'line-through' : 'none')};\r\n`;\r\n\r\nconst CardButton = styled(Button)`\r\n    &:hover{\r\n        color: ${PALETTE[0]};\r\n    }\r\n`;","import React, { useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport Card from './Card';\r\nimport {Button, Input, ADD, DELETE, PALETTE, EMPTY} from '../routes/Home';\r\nimport {Droppable, Draggable} from 'react-beautiful-dnd';\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nexport default function List({boardKey, listKey, listName, cardList, functionSet}){\r\n    const [text, setText] = useState(\"\");\r\n    const [nextListName, setNextListName] = useState(listName);\r\n    const nextListNameRef = useRef();\r\n    const createNewCard = text => {\r\n        functionSet.create(boardKey, listKey, text);\r\n    };\r\n    const onChange = e =>{\r\n        setText(e.target.value);\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        createNewCard(text);\r\n        setText(\"\");\r\n    };\r\n    const deleteCard = (key) => {\r\n        functionSet.remove(boardKey, listKey, key);\r\n    };\r\n    const changeText = e => {\r\n        setNextListName(e.target.value);\r\n    };\r\n    const editListName = () => {\r\n        const nextListName = nextListNameRef.current.innerHTML;\r\n        if(!nextListName){\r\n            setNextListName(listName);\r\n            return;\r\n        }\r\n        else functionSet.edit(boardKey, listKey, EMPTY, nextListName);\r\n    }\r\n    const disableNewLines = e => {\r\n        const keyCode = e.keyCode || e.which;\r\n        if (keyCode === 13) {\r\n          e.returnValue = false;\r\n          if (e.preventDefault){\r\n              e.preventDefault();\r\n          }\r\n        }\r\n    }\r\n    return (\r\n        <ListContainer>\r\n            <h4>\r\n                <StyledEditable\r\n                    innerRef={nextListNameRef}\r\n                    html={nextListName}\r\n                    disabled={false}\r\n                    onChange={changeText}\r\n                    onBlur={editListName}\r\n                    spellCheck='false'\r\n                    onKeyPress={disableNewLines}\r\n                />\r\n            </h4>\r\n            <Droppable droppableId={listKey} type=\"card\">\r\n                {(provided) => (\r\n                    <ScrollView\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                    >\r\n                        {cardList.map((card, index) => (\r\n                            <Draggable key={card.cardKey} draggableId={card.cardKey} index={index}>\r\n                                {(provided, snapshot) => (\r\n                                    <CardWrapper\r\n                                        key={card.cardKey}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        ref={provided.innerRef}\r\n                                        isDragging={snapshot.isDragging}\r\n                                    >\r\n                                        <Card \r\n                                            boardKey={boardKey}\r\n                                            listKey={listKey}\r\n                                            cardKey={card.cardKey}\r\n                                            content={card.content}\r\n                                            done={card.done}\r\n                                            functionSet={functionSet}\r\n                                        />\r\n                                        <CardButton onClick={()=>deleteCard(card.cardKey)}>\r\n                                            <i className={DELETE}></i>\r\n                                        </CardButton>\r\n                                    </CardWrapper>\r\n                                )}\r\n\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </ScrollView>\r\n                )}\r\n            </Droppable>\r\n            <CardAdder>\r\n                <CardInput type=\"text\" value={text} onChange={onChange} placeholder='Add a card..' />\r\n                <Button onClick={onSubmit}><i className={ADD}></i></Button>\r\n            </CardAdder>\r\n        </ListContainer>\r\n    );\r\n\r\n}\r\n\r\nconst ListContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    word-wrap: break-word;\r\n    word-break: break-word;\r\n`;\r\n\r\nconst CardWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n    border-radius: 5px;\r\n    background-color: ${PALETTE[2]};\r\n    padding: 10px;\r\n    color: ${PALETTE[3]};\r\n    flex-grow: 1;\r\n`;\r\n\r\nconst ScrollView = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    max-height: 48vh;\r\n    overflow-y: auto;\r\n    min-height: 1px;\r\n`;\r\n\r\nconst CardAdder = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    margin: 5px 0 10px 0;\r\n    background-color: ${PALETTE[0]};\r\n    padding: 10px;\r\n    color: white;\r\n`;\r\n\r\nconst CardInput = styled(Input)`\r\n    width: 100%;\r\n`;\r\n\r\nconst CardButton = styled(Button)`\r\n    &:hover{\r\n        color: ${PALETTE[0]};\r\n    }\r\n`;\r\n\r\nconst StyledEditable = styled(ContentEditable)`\r\n    padding: 10px;  \r\n    outline-color: ${PALETTE[3]};  \r\n`;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport List from './List';\r\nimport {Button, Input, ADD, DELETE, EMPTY} from '../routes/Home';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nexport default function Board({boardKey, boardName, listList, functionSet}) {\r\n    const [text, setText] = useState(\"\");\r\n    const createNewList = text => {\r\n        functionSet.create(boardKey, EMPTY, text);\r\n    };\r\n    const deleteList = (key) => {\r\n        functionSet.remove(boardKey, key, EMPTY);\r\n    };\r\n    const onChange = e =>{\r\n        setText(e.target.value);\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        createNewList(text);\r\n        setText(\"\");\r\n    };\r\n    const onDragEnd = result => {\r\n        const { destination, source, type } = result;\r\n        if(!destination){\r\n            return;\r\n        }\r\n        if(destination.droppableId===source.droppableId && destination.index===source.index){\r\n            return;\r\n        }\r\n        if(type==='card'){\r\n            functionSet.switchIndex(boardKey, source.droppableId, destination.droppableId, source.index, destination.index);\r\n            return;\r\n        }\r\n        else if(type==='list'){\r\n            functionSet.switchIndex(boardKey, EMPTY, EMPTY, source.index, destination.index);\r\n            return;\r\n        }\r\n    };\r\n\r\n    return(\r\n        <BoardContainer>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"lists\" direction=\"horizontal\" type=\"list\">\r\n                    {(provided) => (\r\n                        <ListField\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {listList.map((list, index) => (\r\n                                <Draggable key={list.listKey} draggableId={list.listKey} index={index}>\r\n                                    {(provided) => (\r\n                                        <ListWrapper\r\n                                            {...provided.draggableProps}\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.dragHandleProps}\r\n                                        >\r\n                                            <List\r\n                                                boardKey={boardKey} \r\n                                                listKey={list.listKey} \r\n                                                listName={list.listName} \r\n                                                cardList={list.cardList} \r\n                                                functionSet={functionSet}\r\n                                            />\r\n                                            <Button onClick={() => deleteList(list.listKey)}>\r\n                                                <i className={DELETE}></i>\r\n                                            </Button>\r\n                                        </ListWrapper>\r\n                                    )}\r\n                                </Draggable>        \r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </ListField>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <div>\r\n                <ListAdder>\r\n                    <ListInput type=\"text\" value={text} onChange={onChange} placeholder='Add a list..'/>\r\n                    <Button onClick={onSubmit}><i className={ADD}></i></Button>\r\n                </ListAdder>\r\n            </div>\r\n        </BoardContainer>\r\n    );\r\n\r\n}\r\n\r\nconst BoardContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    align-items: flex-start;\r\n    padding: 0 10px;\r\n    overflow-x: auto;\r\n    flex-grow: 1;\r\n`;\r\n\r\nconst ListAdder = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 0 20px 0 10px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    padding: 10px 10px 5px 10px;\r\n    width: 230px;\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 0 10px;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    background-color: white;\r\n    min-width: 230px;\r\n    max-width: 230px;\r\n`;\r\n\r\nconst ListInput = styled(Input)`\r\n    margin-bottom: 5px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst ListField = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n`;","import React, {useState, useRef} from 'react';\r\nimport styled from 'styled-components';\r\nimport Board from '../components/Board';\r\nimport {Link} from 'react-router-dom';\r\nimport {PALETTE, EMPTY} from './Home';\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nexport default function BoardPage({location, history, boardList, functionSet}){\r\n    const board = location.state ? boardList.find(board => board.boardKey===location.state.key) : null;\r\n    const [nextBoardName, setNextBoardName] = useState(board ? board.boardName : null);\r\n    const nextBoardNameRef = useRef();\r\n    if(location.state===undefined){\r\n        history.push(\"/\");\r\n        return null;\r\n    }\r\n    const editBoardName = () => {\r\n        const nextBoardName = nextBoardNameRef.current.innerHTML;\r\n        if(!nextBoardName){\r\n            setNextBoardName(board.boardName);\r\n            return;\r\n        }\r\n        else functionSet.edit(location.state.key, EMPTY, EMPTY, nextBoardName);\r\n    };\r\n    const changeText = e => {\r\n        setNextBoardName(e.target.value);\r\n    }\r\n    const disableNewLines = e => {\r\n        const keyCode = e.keyCode || e.which;\r\n        if (keyCode === 13) {\r\n          e.returnValue = false;\r\n          if (e.preventDefault){\r\n              e.preventDefault();\r\n          }\r\n        }\r\n    }\r\n    return (\r\n        <BoardPageWrapper>\r\n            <Header>\r\n                {/* <BoardTitle>{location.state.name}</BoardTitle> */}\r\n                <BoardTitle>\r\n                    <StyledEditable\r\n                        innerRef={nextBoardNameRef}\r\n                        html={nextBoardName}\r\n                        disabled={false}\r\n                        onChange={changeText}\r\n                        onBlur={editBoardName}\r\n                        onKeyPress={disableNewLines}\r\n                        spellCheck='false'\r\n                    />\r\n                </BoardTitle>\r\n                <ToHome to={{pathname: '/'}}><i className=\"fas fa-home\"></i></ToHome>\r\n            </Header>\r\n            <Board \r\n                boardKey={location.state.key} \r\n                boardName={location.state.name} \r\n                listList={board.listList} \r\n                functionSet={functionSet}\r\n            />\r\n        </BoardPageWrapper>\r\n    );\r\n}\r\n\r\nconst BoardPageWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: column;\r\n    text-align: center;\r\n    min-height: 100vh;\r\n`;\r\n\r\nconst BoardTitle = styled.h1`\r\n    font-size: 30px;\r\n    margin: auto;\r\n    padding: 10px 20px;\r\n    color: ${PALETTE[3]};\r\n    cursor: pointer;\r\n`;\r\n\r\nconst StyledEditable = styled(ContentEditable)`\r\n    padding: 10px;\r\n    outline-color: ${PALETTE[3]};  \r\n`;\r\n\r\nconst ToHome = styled(Link)`\r\n    font-size: 30px;\r\n    color: ${PALETTE[3]};\r\n    &:hover{\r\n        color: ${PALETTE[2]};\r\n    }\r\n`;\r\n\r\nconst Header = styled.header`\r\n    display: flex;\r\n    margin-bottom: 20px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 10px 20px;\r\n    background-color: ${PALETTE[1]};\r\n`;\r\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createGlobalStyle } from \"styled-components\";\nimport Home from './routes/Home';\nimport BoardPage from './routes/BoardPage';\n\nconst PALETTE = ['#E9ECE5', '#C0DFD9', '#B3C2BF', '#3B3A36'];\nconst EMPTY =  '---';\n\nconst GlobalStyle = createGlobalStyle`\n    *{\n      box-sizing: border-box;\n    }\n    body{\n        padding: 0;\n        margin: 0;\n        font-family: 'Lora', 'Noto Serif KR';\n        background-color: ${PALETTE[0]};\n    }\n    ::-webkit-scrollbar{\n      background: none;\n      height: 14px;\n    }\n    ::-webkit-scrollbar-track{\n      box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);\n      border-radius: 10px;\n    }\n    ::-webkit-scrollbar-thumb{\n      background: rgba(0, 0, 0, 0.15);\n      border-radius: 10px;\n    }\n`;\n\nfunction App() {\n    const [boardList, setBoardList] = React.useState(\n      JSON.parse(localStorage.getItem('localBoardList')) || []\n    );\n\n    React.useEffect(() => {\n      localStorage.setItem('localBoardList', JSON.stringify(boardList));\n    }, [boardList]);\n\n    const create = (boardKey, listKey, text) => {\n      if(boardKey===EMPTY){ //createBoard\n        const check = boardList.filter(board => board.boardName === text);\n        if(!check.length && text.length){\n            const newBoardList = boardList.concat([{boardKey: text.concat(Date.now()), boardName: text, listList: [], pin: false}]);\n            setBoardList(newBoardList);\n        } \n      }\n      else if(listKey===EMPTY){ //createList\n        const newBoardList = [...boardList];\n        newBoardList.forEach(board => {\n          if(board.boardKey===boardKey){\n            const check = board.listList.filter(list => list.listName === text);\n            if(!check.length && text.length){\n              board.listList.push({listKey: text.concat(Date.now()), listName: text, cardList: []});\n            }\n          }\n        });\n        setBoardList(newBoardList);\n      }\n      else{ //createCard\n        const newBoardList = [...boardList];\n        newBoardList.forEach(board => {\n          if(board.boardKey===boardKey){\n            board.listList.forEach(list => {\n              if(list.listKey===listKey){\n                if(text.length){\n                  list.cardList.push({cardKey: text.concat(Date.now()), content: text, done: false});\n                }\n              }\n            });\n          }\n        });\n        setBoardList(newBoardList);\n      } \n    };\n\n\n    const remove = (boardKey, listKey, cardKey) => {\n      if(boardKey===EMPTY){\n        return;\n      }\n      else{\n        if(listKey===EMPTY){ //removeBoard\n          const newBoardList = boardList.filter(board => board.boardKey !== boardKey);\n          setBoardList(newBoardList);   \n        }\n        else if(cardKey===EMPTY){ //removeList\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.listList = board.listList.filter(list => list.listKey !== listKey);\n            }\n          });\n          setBoardList(newBoardList);\n          setBoardList(newBoardList);\n        }\n        else{ //removeCard\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.listList.forEach(list => {\n                if(list.listKey===listKey){\n                  list.cardList = list.cardList.filter(card => card.cardKey !== cardKey);\n                }\n              });\n            }\n          });\n          setBoardList(newBoardList);\n        }\n      }\n    };\n\n    const edit = (boardKey, listKey, cardKey, text) => {\n      if(boardKey===EMPTY){\n        return;\n      }\n      else{\n        if(listKey===EMPTY){ //editBoard\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.boardName = text;\n            }\n          });\n          setBoardList(newBoardList);   \n        }\n        else if(cardKey===EMPTY){ //editList\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.listList.forEach(list => {\n                if(list.listKey===listKey){\n                  list.listName = text;\n                }\n              });\n            }\n          });\n          setBoardList(newBoardList);\n        }\n        else{ //removeCard\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.listList.forEach(list => {\n                if(list.listKey===listKey){\n                  list.cardList.forEach(card => {\n                    if(card.cardKey===cardKey){\n                      card.context = text;\n                    }\n                  });\n                }\n              });\n            }\n          });\n          setBoardList(newBoardList);\n        }\n      }\n    };\n\n    const togglePin = boardKey => {\n      const newBoardList = [...boardList];\n      newBoardList.forEach(board => {\n        if(board.boardKey===boardKey){\n          board.pin = !board.pin;\n        }\n      })\n      setBoardList(newBoardList);\n    }\n\n    const toggleDone = (boardKey, listKey, cardKey) => {\n      const newBoardList = [...boardList];\n      newBoardList.forEach(board => {\n        if(board.boardKey===boardKey){\n          board.listList.forEach(list => {\n            if(list.listKey===listKey){\n              list.cardList.forEach(card => {\n                if(card.cardKey===cardKey){\n                  card.done = !card.done;\n                }\n              });\n            }\n          });\n        }\n      });\n      setBoardList(newBoardList);\n    };\n\n    const switchIndex = (boardKey, startListKey, endListKey, startIndex, endIndex) => {\n      const newBoardList = [...boardList];\n      let dragCard = null;\n      let dragList = null;\n      if(startListKey !== EMPTY){\n        newBoardList.forEach(board => {\n          if(board.boardKey===boardKey){\n            board.listList.forEach(list => {\n              if(list.listKey===startListKey){\n                dragCard = list.cardList[startIndex];\n                list.cardList.splice(startIndex, 1);\n                if(startListKey===endListKey){\n                  list.cardList.splice(endIndex, 0, dragCard);\n                }\n                else{\n                  board.listList.forEach(list => {\n                    if(list.listKey===endListKey){\n                      list.cardList.splice(endIndex, 0, dragCard);\n                    }\n                  });\n                }\n              }\n            });\n          }\n        });\n        setBoardList(newBoardList);\n      }\n      else{\n        newBoardList.forEach(board => {\n          if(board.boardKey===boardKey){\n            dragList = board.listList[startIndex];\n            board.listList.splice(startIndex, 1);\n            board.listList.splice(endIndex, 0, dragList);\n          }\n        });\n        setBoardList(newBoardList);\n      }\n    };\n\n    const functionSet = {\n      create: create,\n      remove: remove,\n      edit: edit,\n      togglePin: togglePin,\n      toggleDone: toggleDone,\n      switchIndex: switchIndex,\n    };\n\n    return (\n        <>\n            <GlobalStyle />\n            <HashRouter>\n              <Route path=\"/\" exact={true} render={props => <Home {...props} boardList={boardList} functionSet={functionSet} />} />\n              <Route path=\"/board/:boardName\" render={props => <BoardPage {...props} boardList={boardList} functionSet={functionSet}/>} />\n            </HashRouter>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}