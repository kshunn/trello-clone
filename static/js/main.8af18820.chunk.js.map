{"version":3,"sources":["routes/Home.js","components/Card.js","components/List.js","components/Board.js","routes/BoardPage.js","App.js","index.js"],"names":["ADD","DELETE","PIN","PALETTE","Home","boardList","functionSet","useState","text","setText","deleteBoard","key","remove","Container","BoardsWrapper","Title","Boards","map","board","pin","BoardLink","boardKey","ToBoard","to","pathname","boardName","state","name","Button","onClick","togglePin","className","BoardAdder","BoardInput","type","value","onChange","e","target","placeholder","preventDefault","create","createNewBoard","styled","button","Input","input","h2","Link","div","Card","listKey","cardKey","content","done","ICON","Cardtext","CardButton","toggleDone","props","List","listName","cardList","provided","ListContainer","dragHandleProps","droppableId","ScrollView","ref","innerRef","droppableProps","card","index","draggableId","snapshot","CardWrapper","draggableProps","isDragging","CardAdder","CardInput","createNewCard","Board","listList","BoardContainer","onDragEnd","result","destination","source","switchIndex","direction","ListField","list","ListWrapper","ListAdder","ListInput","createNewList","BoardPage","location","history","find","nextBoardName","setNextBoardName","nextBoardRef","useRef","undefined","push","BoardPageWrapper","Header","BoardTitle","StyledEditable","html","disabled","onBlur","current","innerHTML","edit","spellCheck","ToHome","h1","ContentEditable","header","GlobalStyle","createGlobalStyle","App","React","JSON","parse","localStorage","getItem","setBoardList","useEffect","setItem","stringify","filter","length","newBoardList","concat","Date","now","forEach","context","startListKey","endListKey","startIndex","endIndex","dragCard","dragList","splice","path","exact","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.8af18820.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport const ADD = 'fas fa-plus';\r\nexport const DELETE = \"fas fa-trash\";\r\nconst PIN = \"fas fa-thumbtack\";\r\nexport const PALETTE = ['#E9ECE5', '#C0DFD9', '#B3C2BF', '#3B3A36'];\r\nexport const EMPTY =  '---';\r\n\r\nexport default function Home({boardList, functionSet}){\r\n    const [text, setText] = useState(\"\");\r\n    const createNewBoard = text => {\r\n        functionSet.create(EMPTY, EMPTY, text);\r\n    };\r\n    const deleteBoard = key => {\r\n        functionSet.remove(key, EMPTY, EMPTY);\r\n    };\r\n    const onChange = e =>{\r\n        setText(e.target.value);\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        createNewBoard(text);\r\n        setText(\"\");\r\n    };\r\n    return(\r\n        <Container>\r\n            <BoardsWrapper>\r\n                <Title>Pinned Boards</Title> \r\n                <Boards>  \r\n                {boardList.map(board => (\r\n                    board.pin ? (\r\n                        <BoardLink key={board.boardKey}>\r\n                            <ToBoard to={{\r\n                                pathname: `/board/${board.boardName}-board`,\r\n                                state:{\r\n                                    key: board.boardKey,\r\n                                    name: board.boardName\r\n                                }\r\n                            }}>\r\n                                {board.boardName}\r\n                            </ToBoard>\r\n                            <Button onClick={() => functionSet.togglePin(board.boardKey)}><i className={PIN}></i></Button>\r\n                            <Button onClick={() => deleteBoard(board.boardKey)}><i className={DELETE}></i></Button>\r\n                        </BoardLink>\r\n                    ) : null\r\n                ))}\r\n                </Boards>   \r\n            </BoardsWrapper> \r\n            <BoardsWrapper>\r\n                <Title>Boards</Title> \r\n                <Boards>  \r\n                {boardList.map(board => (\r\n                    <BoardLink key={board.boardKey}>\r\n                        <ToBoard to={{\r\n                            pathname: `/board/${board.boardName}-board`,\r\n                            state:{\r\n                                key: board.boardKey,\r\n                                name: board.boardName\r\n                            }\r\n                        }}>\r\n                            {board.boardName}\r\n                        </ToBoard>\r\n                        <Button onClick={() => functionSet.togglePin(board.boardKey)}><i className={PIN}></i></Button>\r\n                        <Button onClick={() => deleteBoard(board.boardKey)}><i className={DELETE}></i></Button>\r\n                    </BoardLink>\r\n                ))}\r\n                <BoardAdder>\r\n                    <BoardInput type=\"text\" value={text} onChange={onChange} placeholder='Add a board..'/>\r\n                    <Button onClick={onSubmit}><i className={ADD}></i></Button>\r\n                </BoardAdder>\r\n                </Boards>   \r\n            </BoardsWrapper>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background: none;\r\n    &:hover{\r\n        color: ${PALETTE[2]};\r\n    }\r\n    cursor: pointer;\r\n    color: ${PALETTE[3]};    \r\n`;\r\n\r\nexport const Input = styled.input`\r\n    border: none;\r\n    padding: 5px;\r\n    background: none;\r\n    font-family: 'Lora', 'Noto Serif KR';\r\n    &::placeholder{\r\n        color: ${PALETTE[2]};\r\n    }\r\n`;\r\n\r\nconst Title = styled.h2`\r\n    color: ${PALETTE[3]};\r\n`;\r\n\r\nconst BoardInput = styled(Input)`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n    width: 100%;\r\n    margin: auto 0;\r\n`;\r\n\r\nconst ToBoard = styled(Link)`\r\n    color: ${PALETTE[3]};\r\n    text-decoration: none;\r\n    &:hover{\r\n        color: ${PALETTE[2]};\r\n    }\r\n    margin: auto;\r\n    font-weight: bold;\r\n    word-wrap: break-word;\r\n    word-break: break-word;\r\n    text-align: center;\r\n`;\r\n\r\nconst BoardAdder = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    margin: 10px;\r\n    padding: 20px;\r\n    border-radius: 20px;\r\n    width: 200px;\r\n    height: 80px;\r\n    background-color: white;\r\n`;\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 40px;\r\n`;\r\n\r\nconst BoardLink = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 10px;\r\n    padding: 20px;\r\n    border-radius: 20px;\r\n    width: 200px;\r\n    height: 80px;\r\n    background-color: white;\r\n`;\r\n\r\nconst Boards = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n`;\r\n\r\nconst BoardsWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    align-items: center;\r\n    border-radius: 20px;\r\n    background-color: ${PALETTE[1]};\r\n    margin: 10px 0;\r\n`;\r\n\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Button, PALETTE} from '../routes/Home';\r\n\r\nconst CHECK = \"fas fa-check\";\r\nconst DONE = \"fas fa-times\";\r\n\r\nexport default function Card({ boardKey, listKey, cardKey, content, done, functionSet }){\r\n    const ICON = done ? DONE : CHECK;\r\n    return (\r\n        <>\r\n            <Cardtext done={done}>{content}</Cardtext>\r\n            <CardButton done={done} onClick={()=>functionSet.toggleDone(boardKey, listKey, cardKey)}><i className={ICON}></i></CardButton>\r\n        </>\r\n    );\r\n}\r\n\r\nconst Cardtext = styled.div`\r\n    width: 100%;\r\n    padding: 5px;\r\n    text-align: left;\r\n    font-size: 14px;\r\n    text-decoration: ${props => (props.done ? 'line-through' : 'none')};\r\n`;\r\n\r\nconst CardButton = styled(Button)`\r\n    &:hover{\r\n        color: ${PALETTE[0]};\r\n    }\r\n`;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport Card from './Card';\r\nimport {Button, Input, ADD, DELETE, PALETTE} from '../routes/Home';\r\nimport {Droppable, Draggable} from 'react-beautiful-dnd';\r\n\r\nexport default function List({boardKey, listKey, listName, cardList, functionSet, provided}){\r\n    const [text, setText] = useState(\"\");\r\n    const createNewCard = text => {\r\n        functionSet.create(boardKey, listKey, text);\r\n    };\r\n    const onChange = e =>{\r\n        setText(e.target.value);\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        createNewCard(text);\r\n        setText(\"\");\r\n    };\r\n    const deleteCard = (key) => {\r\n        functionSet.remove(boardKey, listKey, key);\r\n    };\r\n    return (\r\n        <ListContainer>\r\n            <h4 {...provided.dragHandleProps}>{listName}</h4>\r\n            <Droppable droppableId={listKey} type=\"card\">\r\n                {(provided) => (\r\n                    <ScrollView\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                    >\r\n                        {cardList.map((card, index) => (\r\n                            <Draggable key={card.cardKey} draggableId={card.cardKey} index={index}>\r\n                                {(provided, snapshot) => (\r\n                                    <CardWrapper\r\n                                        key={card.cardKey}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        ref={provided.innerRef}\r\n                                        isDragging={snapshot.isDragging}\r\n                                    >\r\n                                        <Card \r\n                                            boardKey={boardKey}\r\n                                            listKey={listKey}\r\n                                            cardKey={card.cardKey}\r\n                                            content={card.content}\r\n                                            done={card.done}\r\n                                            functionSet={functionSet}\r\n                                        />\r\n                                        <CardButton onClick={()=>deleteCard(card.cardKey)}><i className={DELETE}></i></CardButton>\r\n                                    </CardWrapper>\r\n                                )}\r\n\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </ScrollView>\r\n                )}\r\n            </Droppable>\r\n            <CardAdder>\r\n                <CardInput type=\"text\" value={text} onChange={onChange} placeholder='Add a card..' />\r\n                <Button onClick={onSubmit}><i className={ADD}></i></Button>\r\n            </CardAdder>\r\n        </ListContainer>\r\n    );\r\n\r\n}\r\n\r\nconst ListContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    word-wrap: break-word;\r\n    word-break: break-word;\r\n`;\r\n\r\nconst CardWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n    border-radius: 5px;\r\n    background-color: ${PALETTE[2]};\r\n    padding: 10px;\r\n    color: ${PALETTE[3]};\r\n    flex-grow: 1;\r\n`;\r\n\r\nconst ScrollView = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    max-height: 48vh;\r\n    overflow-y: auto;\r\n    min-height: 1px;\r\n`;\r\n\r\nconst CardAdder = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    margin: 5px 0 10px 0;\r\n    background-color: ${PALETTE[0]};\r\n    padding: 10px;\r\n    color: white;\r\n`;\r\n\r\nconst CardInput = styled(Input)`\r\n    width: 100%;\r\n`;\r\n\r\nconst CardButton = styled(Button)`\r\n    &:hover{\r\n        color: ${PALETTE[0]};\r\n    }\r\n`;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport List from './List';\r\nimport {Button, Input, ADD, DELETE, EMPTY} from '../routes/Home';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nexport default function Board({boardKey, boardName, listList, functionSet}) {\r\n    const [text, setText] = useState(\"\");\r\n    const createNewList = text => {\r\n        functionSet.create(boardKey, EMPTY, text);\r\n    };\r\n    const deleteList = (key) => {\r\n        functionSet.remove(boardKey, key, EMPTY);\r\n    };\r\n    const onChange = e =>{\r\n        setText(e.target.value);\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        createNewList(text);\r\n        setText(\"\");\r\n    };\r\n    const onDragEnd = result => {\r\n        const { destination, source, type } = result;\r\n        if(!destination){\r\n            return;\r\n        }\r\n        if(destination.droppableId===source.droppableId && destination.index===source.index){\r\n            return;\r\n        }\r\n        if(type==='card'){\r\n            functionSet.switchIndex(boardKey, source.droppableId, destination.droppableId, source.index, destination.index);\r\n            return;\r\n        }\r\n        else if(type==='list'){\r\n            functionSet.switchIndex(boardKey, EMPTY, EMPTY, source.index, destination.index);\r\n            return;\r\n        }\r\n    };\r\n\r\n    return(\r\n        <BoardContainer>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"lists\" direction=\"horizontal\" type=\"list\">\r\n                    {(provided) => (\r\n                        <ListField\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {listList.map((list, index) => (\r\n                                <Draggable key={list.listKey} draggableId={list.listKey} index={index}>\r\n                                    {(provided) => (\r\n                                        <ListWrapper\r\n                                            {...provided.draggableProps}\r\n                                            ref={provided.innerRef}\r\n                                        >\r\n                                            <List\r\n                                                boardKey={boardKey} \r\n                                                listKey={list.listKey} \r\n                                                listName={list.listName} \r\n                                                cardList={list.cardList} \r\n                                                functionSet={functionSet}\r\n                                                provided={provided}\r\n                                            />\r\n                                            <Button onClick={() => deleteList(list.listKey)}><i className={DELETE}></i></Button>\r\n                                        </ListWrapper>\r\n                                    )}\r\n                                </Draggable>        \r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </ListField>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <div>\r\n                <ListAdder>\r\n                    <ListInput type=\"text\" value={text} onChange={onChange} placeholder='Add a list..'/>\r\n                    <Button onClick={onSubmit}><i className={ADD}></i></Button>\r\n                </ListAdder>\r\n            </div>\r\n        </BoardContainer>\r\n    );\r\n\r\n}\r\n\r\nconst BoardContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    align-items: flex-start;\r\n    padding: 0 10px;\r\n    overflow-x: auto;\r\n    flex-grow: 1;\r\n`;\r\n\r\nconst ListAdder = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 0 20px 0 10px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    padding: 10px 10px 5px 10px;\r\n    width: 230px;\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 0 10px;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    background-color: white;\r\n    min-width: 230px;\r\n    max-width: 230px;\r\n`;\r\n\r\nconst ListInput = styled(Input)`\r\n    margin-bottom: 5px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst ListField = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n`;","import React, {useState, useRef} from 'react';\r\nimport styled from 'styled-components';\r\nimport Board from '../components/Board';\r\nimport {Link} from 'react-router-dom';\r\nimport {PALETTE, EMPTY} from './Home';\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nexport default function BoardPage({location, history, boardList, functionSet}){\r\n    const board = location.state ? boardList.find(board => board.boardKey===location.state.key) : null;\r\n    const [nextBoardName, setNextBoardName] = useState(board ? board.boardName : null);\r\n    const nextBoardRef = useRef();\r\n    if(location.state===undefined){\r\n        history.push(\"/\");\r\n        return null;\r\n    }\r\n    const editBoardName = () => {\r\n        const nextBoardName = nextBoardRef.current.innerHTML;\r\n        if(!nextBoardName){\r\n            setNextBoardName(board.boardName);\r\n            return;\r\n        }\r\n        else functionSet.edit(location.state.key, EMPTY, EMPTY, nextBoardName);\r\n    };\r\n    const changeText = e => {\r\n        setNextBoardName(e.target.value);\r\n    }\r\n    return (\r\n        <BoardPageWrapper>\r\n            <Header>\r\n                {/* <BoardTitle>{location.state.name}</BoardTitle> */}\r\n                <BoardTitle>\r\n                    <StyledEditable\r\n                        innerRef={nextBoardRef}\r\n                        html={nextBoardName}\r\n                        disabled={false}\r\n                        onChange={changeText}\r\n                        onBlur={editBoardName}\r\n                        spellCheck='false'\r\n                    />\r\n                </BoardTitle>\r\n                <ToHome to={{pathname: '/'}}><i className=\"fas fa-home\"></i></ToHome>\r\n            </Header>\r\n            <Board \r\n                boardKey={location.state.key} \r\n                boardName={location.state.name} \r\n                listList={board.listList} \r\n                functionSet={functionSet}\r\n            />\r\n        </BoardPageWrapper>\r\n    );\r\n}\r\n\r\nconst BoardPageWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: column;\r\n    text-align: center;\r\n    min-height: 100vh;\r\n`;\r\n\r\nconst BoardTitle = styled.h1`\r\n    font-size: 30px;\r\n    margin: auto;\r\n    padding: 10px 20px;\r\n    color: ${PALETTE[3]};\r\n    cursor: pointer;\r\n`;\r\n\r\nconst StyledEditable = styled(ContentEditable)`\r\n    padding: 10px;\r\n    outline-color: ${PALETTE[3]};    \r\n`;\r\n\r\nconst ToHome = styled(Link)`\r\n    font-size: 30px;\r\n    color: ${PALETTE[3]};\r\n    &:hover{\r\n        color: ${PALETTE[2]};\r\n    }\r\n`;\r\n\r\nconst Header = styled.header`\r\n    display: flex;\r\n    margin-bottom: 20px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 10px 20px;\r\n    background-color: ${PALETTE[1]};\r\n`;\r\n","import React from 'react';\nimport { HashRouter, Route } from 'react-router-dom';\nimport { createGlobalStyle } from \"styled-components\";\nimport Home from './routes/Home';\nimport BoardPage from './routes/BoardPage';\n\nconst PALETTE = ['#E9ECE5', '#C0DFD9', '#B3C2BF', '#3B3A36'];\nconst EMPTY =  '---';\n\nconst GlobalStyle = createGlobalStyle`\n    *{\n      box-sizing: border-box;\n    }\n    body{\n        padding: 0;\n        margin: 0;\n        font-family: 'Lora', 'Noto Serif KR';\n        background-color: ${PALETTE[0]};\n    }\n    ::-webkit-scrollbar{\n      background: none;\n      height: 14px;\n    }\n    ::-webkit-scrollbar-track{\n      box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);\n      border-radius: 10px;\n    }\n    ::-webkit-scrollbar-thumb{\n      background: rgba(0, 0, 0, 0.15);\n      border-radius: 10px;\n    }\n`;\n\nfunction App() {\n    const [boardList, setBoardList] = React.useState(\n      JSON.parse(localStorage.getItem('localBoardList')) || []\n    );\n\n    React.useEffect(() => {\n      localStorage.setItem('localBoardList', JSON.stringify(boardList));\n    }, [boardList]);\n\n    const create = (boardKey, listKey, text) => {\n      if(boardKey===EMPTY){ //createBoard\n        const check = boardList.filter(board => board.boardName === text);\n        if(!check.length && text.length){\n            const newBoardList = boardList.concat([{boardKey: text.concat(Date.now()), boardName: text, listList: [], pin: false}]);\n            setBoardList(newBoardList);\n        } \n      }\n      else if(listKey===EMPTY){ //createList\n        const newBoardList = [...boardList];\n        newBoardList.forEach(board => {\n          if(board.boardKey===boardKey){\n            const check = board.listList.filter(list => list.listName === text);\n            if(!check.length && text.length){\n              board.listList.push({listKey: text.concat(Date.now()), listName: text, cardList: []});\n            }\n          }\n        });\n        setBoardList(newBoardList);\n      }\n      else{ //createCard\n        const newBoardList = [...boardList];\n        newBoardList.forEach(board => {\n          if(board.boardKey===boardKey){\n            board.listList.forEach(list => {\n              if(list.listKey===listKey){\n                if(text.length){\n                  list.cardList.push({cardKey: text.concat(Date.now()), content: text, done: false});\n                }\n              }\n            });\n          }\n        });\n        setBoardList(newBoardList);\n      } \n    };\n\n\n    const remove = (boardKey, listKey, cardKey) => {\n      if(boardKey===EMPTY){\n        return;\n      }\n      else{\n        if(listKey===EMPTY){ //removeBoard\n          const newBoardList = boardList.filter(board => board.boardKey !== boardKey);\n          setBoardList(newBoardList);   \n        }\n        else if(cardKey===EMPTY){ //removeList\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.listList = board.listList.filter(list => list.listKey !== listKey);\n            }\n          });\n          setBoardList(newBoardList);\n          setBoardList(newBoardList);\n        }\n        else{ //removeCard\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.listList.forEach(list => {\n                if(list.listKey===listKey){\n                  list.cardList = list.cardList.filter(card => card.cardKey !== cardKey);\n                }\n              });\n            }\n          });\n          setBoardList(newBoardList);\n        }\n      }\n    };\n\n    const edit = (boardKey, listKey, cardKey, text) => {\n      if(boardKey===EMPTY){\n        return;\n      }\n      else{\n        if(listKey===EMPTY){ //editBoard\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.boardName = text;\n            }\n          });\n          setBoardList(newBoardList);   \n        }\n        else if(cardKey===EMPTY){ //editList\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.listList.forEach(list => {\n                if(list.listKey===listKey){\n                  list.listName = text;\n                }\n              });\n            }\n          });\n          setBoardList(newBoardList);\n        }\n        else{ //removeCard\n          const newBoardList = [...boardList];\n          newBoardList.forEach(board => {\n            if(board.boardKey===boardKey){\n              board.listList.forEach(list => {\n                if(list.listKey===listKey){\n                  list.cardList.forEach(card => {\n                    if(card.cardKey===cardKey){\n                      card.context = text;\n                    }\n                  });\n                }\n              });\n            }\n          });\n          setBoardList(newBoardList);\n        }\n      }\n    };\n\n    const togglePin = boardKey => {\n      const newBoardList = [...boardList];\n      newBoardList.forEach(board => {\n        if(board.boardKey===boardKey){\n          board.pin = !board.pin;\n        }\n      })\n      setBoardList(newBoardList);\n    }\n\n    const toggleDone = (boardKey, listKey, cardKey) => {\n      const newBoardList = [...boardList];\n      newBoardList.forEach(board => {\n        if(board.boardKey===boardKey){\n          board.listList.forEach(list => {\n            if(list.listKey===listKey){\n              list.cardList.forEach(card => {\n                if(card.cardKey===cardKey){\n                  card.done = !card.done;\n                }\n              });\n            }\n          });\n        }\n      });\n      setBoardList(newBoardList);\n    };\n\n    const switchIndex = (boardKey, startListKey, endListKey, startIndex, endIndex) => {\n      const newBoardList = [...boardList];\n      let dragCard = null;\n      let dragList = null;\n      if(startListKey !== EMPTY){\n        newBoardList.forEach(board => {\n          if(board.boardKey===boardKey){\n            board.listList.forEach(list => {\n              if(list.listKey===startListKey){\n                dragCard = list.cardList[startIndex];\n                list.cardList.splice(startIndex, 1);\n                if(startListKey===endListKey){\n                  list.cardList.splice(endIndex, 0, dragCard);\n                }\n                else{\n                  board.listList.forEach(list => {\n                    if(list.listKey===endListKey){\n                      list.cardList.splice(endIndex, 0, dragCard);\n                    }\n                  });\n                }\n              }\n            });\n          }\n        });\n        setBoardList(newBoardList);\n      }\n      else{\n        newBoardList.forEach(board => {\n          if(board.boardKey===boardKey){\n            dragList = board.listList[startIndex];\n            board.listList.splice(startIndex, 1);\n            board.listList.splice(endIndex, 0, dragList);\n          }\n        });\n        setBoardList(newBoardList);\n      }\n    };\n\n    const functionSet = {\n      create: create,\n      remove: remove,\n      edit: edit,\n      togglePin: togglePin,\n      toggleDone: toggleDone,\n      switchIndex: switchIndex,\n    };\n\n    return (\n        <>\n            <GlobalStyle />\n            <HashRouter>\n              <Route path=\"/\" exact={true} render={props => <Home {...props} boardList={boardList} functionSet={functionSet} />} />\n              <Route path=\"/board/:boardName\" render={props => <BoardPage {...props} boardList={boardList} functionSet={functionSet}/>} />\n            </HashRouter>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}