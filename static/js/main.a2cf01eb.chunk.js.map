{"version":3,"sources":["components/Help.js","routes/Home.js","components/Card.js","components/List.js","components/Board.js","routes/BoardPage.js","App.js","index.js"],"names":["Help","show","HelpContainer","showHelp","Bold","styled","div","ADD","DELETE","PIN","PALETTE","Home","boardList","functionSet","useState","text","setText","setShowHelp","deleteBoard","key","window","confirm","remove","Container","BoardsWrapper","Title","Boards","map","board","pin","BoardLink","boardKey","ToBoard","to","pathname","boardName","state","name","Button","onClick","togglePin","className","BoardAdder","BoardInput","type","value","onChange","e","target","placeholder","preventDefault","create","createNewBoard","HelpLink","button","Input","input","h2","Link","a","Card","listKey","cardKey","cardName","done","ICON","Cardtext","CardButton","toggleDone","props","List","listName","cardList","nextListName","setNextListName","nextListNameRef","useRef","ListContainer","ListTitle","StyledEditable","innerRef","html","disabled","onBlur","current","innerHTML","edit","spellCheck","onKeyPress","keyCode","which","returnValue","droppableId","provided","ScrollView","ref","droppableProps","card","index","draggableId","snapshot","CardWrapper","draggableProps","dragHandleProps","isDragging","content","CardAdder","CardInput","createNewCard","ContentEditable","h4","Board","listList","BoardContainer","onDragEnd","result","destination","source","switchIndex","direction","ListField","list","ListWrapper","ListAdder","ListInput","createNewList","BoardPage","location","history","find","nextBoardName","setNextBoardName","nextBoardNameRef","undefined","push","BoardPageWrapper","Header","BoardTitle","ToHome","h1","header","GlobalStyle","createGlobalStyle","App","React","JSON","parse","localStorage","getItem","setBoardList","useEffect","setItem","stringify","filter","length","newBoardList","concat","Date","now","forEach","startListKey","endListKey","startIndex","endIndex","dragCard","dragList","splice","path","exact","render","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.a2cf01eb.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PALETTE = ['#E9ECE5', '#C0DFD9', '#B3C2BF', '#3B3A36'];\r\n\r\nexport default function Help({show}){\r\n    return(\r\n        show ? (\r\n            <HelpContainer showHelp>\r\n                <Bold>Home Page</Bold>\r\n                Click on a board name to enter the board page<br/>\r\n                Pin important boards for quick access<br/><br/>\r\n                <Bold>Board Page</Bold>\r\n                Click on the board or list name to modify it<br/>\r\n                Drag and drop lists and cards to change their positions<br/><br/>\r\n                <Bold>Card Page</Bold>\r\n                Coming soon<br/>\r\n            </HelpContainer>\r\n        ) : null\r\n    ); \r\n}\r\n\r\nconst HelpContainer = styled.div`\r\n    position: fixed;\r\n    padding: 30px;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -90%);\r\n    background: ${PALETTE[2]};\r\n    display: block;\r\n    border-radius: 10px;\r\n    font-size: 16px;\r\n    opacity: 0.8;\r\n`;\r\n\r\nconst Bold = styled.div`\r\n    font-weight: bold;\r\n    text-decoration: underline;\r\n`;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport {Link} from 'react-router-dom';\r\nimport Help from '../components/Help';\r\n\r\nexport const ADD = 'fas fa-plus';\r\nexport const DELETE = \"fas fa-trash\";\r\nconst PIN = \"far fa-star\";\r\nconst PINNED = \"fas fa-star\";\r\nexport const PALETTE = ['#E9ECE5', '#C0DFD9', '#B3C2BF', '#3B3A36'];\r\nexport const EMPTY =  '---';\r\n\r\nexport default function Home({boardList, functionSet}){\r\n    const [text, setText] = useState(\"\");\r\n    const [showHelp, setShowHelp] = useState(false);\r\n    const createNewBoard = text => {\r\n        functionSet.create(EMPTY, EMPTY, text);\r\n    };\r\n    const deleteBoard = key => {\r\n        const askDelete = window.confirm(\"Do you really want to remove the board?\");\r\n        if(askDelete){\r\n            functionSet.remove(key, EMPTY, EMPTY);\r\n        } \r\n    };\r\n    const onChange = e =>{\r\n        setText(e.target.value);\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        createNewBoard(text);\r\n        setText(\"\");\r\n    };\r\n    return(\r\n        <Container>\r\n            <BoardsWrapper>\r\n                <Title>Pinned Boards</Title> \r\n                <Boards>  \r\n                {boardList.map(board => (\r\n                    board.pin ? (\r\n                        <BoardLink key={board.boardKey}>\r\n                            <ToBoard to={{\r\n                                pathname: `/board/${board.boardName}-board`,\r\n                                state:{\r\n                                    key: board.boardKey,\r\n                                    name: board.boardName\r\n                                }\r\n                            }}>\r\n                                {board.boardName}\r\n                            </ToBoard>\r\n                            <Button onClick={() => functionSet.togglePin(board.boardKey)}><i className={board.pin ? PINNED : PIN}></i></Button>\r\n                            <Button onClick={() => deleteBoard(board.boardKey)}><i className={DELETE}></i></Button>\r\n                        </BoardLink>\r\n                    ) : null\r\n                ))}\r\n                </Boards>   \r\n            </BoardsWrapper> \r\n            <BoardsWrapper>\r\n                <Title>Boards</Title> \r\n                <Boards>  \r\n                {boardList.map(board => (\r\n                    <BoardLink key={board.boardKey}>\r\n                        <ToBoard to={{\r\n                            pathname: `/board/${board.boardName}-board`,\r\n                            state:{\r\n                                key: board.boardKey,\r\n                                name: board.boardName\r\n                            }\r\n                        }}>\r\n                            {board.boardName}\r\n                        </ToBoard>\r\n                        <Button onClick={() => functionSet.togglePin(board.boardKey)}><i className={board.pin ? PINNED : PIN}></i></Button>\r\n                        <Button onClick={() => deleteBoard(board.boardKey)}><i className={DELETE}></i></Button>\r\n                    </BoardLink>\r\n                ))}\r\n                <BoardAdder>\r\n                    <BoardInput type=\"text\" value={text} onChange={onChange} placeholder='Add a board..'/>\r\n                    <Button onClick={onSubmit}><i className={ADD}></i></Button>\r\n                </BoardAdder>\r\n                </Boards>   \r\n            </BoardsWrapper>\r\n            <HelpLink\r\n                onClick={() => setShowHelp(!showHelp)}\r\n            >\r\n                {showHelp ? 'Hide' : 'Tips'}\r\n            </HelpLink>\r\n            <Help show={showHelp}/>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport const Button = styled.button`\r\n    border: none;\r\n    background: none;\r\n    &:hover{\r\n        color: ${PALETTE[2]};\r\n    }\r\n    cursor: pointer;\r\n    color: ${PALETTE[3]};  \r\n    outline: none;  \r\n`;\r\n\r\nexport const Input = styled.input`\r\n    border: none;\r\n    padding: 5px;\r\n    background: none;\r\n    font-family: 'Lora', 'Noto Serif KR';\r\n    &::placeholder{\r\n        color: ${PALETTE[2]};\r\n    }\r\n    outline-color: ${PALETTE[3]};\r\n`;\r\n\r\nconst Title = styled.h2`\r\n    color: ${PALETTE[3]};\r\n`;\r\n\r\nconst BoardInput = styled(Input)`\r\n    text-align: center;\r\n    font-weight: bold;\r\n    font-size: 16px;\r\n    width: 100%;\r\n    margin: auto 0;\r\n`;\r\n\r\nconst ToBoard = styled(Link)`\r\n    color: ${PALETTE[3]};\r\n    text-decoration: none;\r\n    &:hover{\r\n        color: ${PALETTE[2]};\r\n    }\r\n    margin: auto;\r\n    font-weight: bold;\r\n    word-wrap: break-word;\r\n    word-break: break-word;\r\n    text-align: center;\r\n`;\r\n\r\nconst BoardAdder = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    margin: 10px;\r\n    padding: 20px;\r\n    border-radius: 20px;\r\n    width: 200px;\r\n    height: 80px;\r\n    background-color: white;\r\n`;\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-wrap: wrap;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    padding: 40px;\r\n`;\r\n\r\nconst BoardLink = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin: 10px;\r\n    padding: 20px;\r\n    border-radius: 20px;\r\n    width: 200px;\r\n    height: 80px;\r\n    background-color: white;\r\n`;\r\n\r\nconst Boards = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n`;\r\n\r\nconst BoardsWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    align-items: center;\r\n    border-radius: 20px;\r\n    background-color: ${PALETTE[1]};\r\n    margin: 10px 0;\r\n`;\r\n\r\nconst HelpLink = styled.a`\r\n    padding-top: 20px;\r\n    font-size: 14px;\r\n    color: ${PALETTE[3]};\r\n    cursor: pointer;\r\n    font-weight: bold;\r\n    text-decoration: underline;\r\n`;\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Button, PALETTE} from '../routes/Home';\r\n\r\nconst CHECK = \"fas fa-check\";\r\nconst DONE = \"fas fa-times\";\r\n\r\nexport default function Card({ boardKey, listKey, cardKey, cardName, done, functionSet }){\r\n    const ICON = done ? DONE : CHECK;\r\n    return (\r\n        <>\r\n            <Cardtext done={done}>{cardName}</Cardtext>\r\n            <CardButton done={done} onClick={()=>functionSet.toggleDone(boardKey, listKey, cardKey)}><i className={ICON}></i></CardButton>\r\n        </>\r\n    );\r\n}\r\n\r\nconst Cardtext = styled.div`\r\n    width: 100%;\r\n    padding: 5px;\r\n    text-align: left;\r\n    font-size: 14px;\r\n    text-decoration: ${props => (props.done ? 'line-through' : 'none')};\r\n`;\r\n\r\nconst CardButton = styled(Button)`\r\n    &:hover{\r\n        color: ${PALETTE[0]};\r\n    }\r\n`;","import React, { useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport Card from './Card';\r\nimport {Button, Input, ADD, DELETE, PALETTE, EMPTY} from '../routes/Home';\r\nimport {Droppable, Draggable} from 'react-beautiful-dnd';\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nexport default function List({boardKey, listKey, listName, cardList, functionSet}){\r\n    const [text, setText] = useState(\"\");\r\n    const [nextListName, setNextListName] = useState(listName);\r\n    const nextListNameRef = useRef();\r\n    const createNewCard = text => {\r\n        functionSet.create(boardKey, listKey, text);\r\n    };\r\n    const onChange = e =>{\r\n        setText(e.target.value);\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        createNewCard(text);\r\n        setText(\"\");\r\n    };\r\n    const deleteCard = (key) => {\r\n        const askDelete = window.confirm(\"Do you really want to remove the card?\");\r\n        if(askDelete){\r\n            functionSet.remove(boardKey, listKey, key);\r\n        }\r\n    };\r\n    const changeText = e => {\r\n        setNextListName(e.target.value);\r\n    };\r\n    const editListName = () => {\r\n        const nextListName = nextListNameRef.current.innerHTML;\r\n        if(!nextListName){\r\n            setNextListName(listName);\r\n            return;\r\n        }\r\n        else functionSet.edit(boardKey, listKey, EMPTY, nextListName);\r\n    }\r\n    const disableNewLines = e => {\r\n        const keyCode = e.keyCode || e.which;\r\n        if (keyCode === 13) {\r\n          e.returnValue = false;\r\n          if (e.preventDefault){\r\n              e.preventDefault();\r\n          }\r\n        }\r\n    }\r\n    return (\r\n        <ListContainer>\r\n            <ListTitle>\r\n                <StyledEditable\r\n                    innerRef={nextListNameRef}\r\n                    html={nextListName}\r\n                    disabled={false}\r\n                    onChange={changeText}\r\n                    onBlur={editListName}\r\n                    spellCheck='false'\r\n                    onKeyPress={disableNewLines}\r\n                />\r\n            </ListTitle>\r\n            <Droppable droppableId={listKey} type=\"card\">\r\n                {(provided) => (\r\n                    <ScrollView\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                    >\r\n                        {cardList.map((card, index) => (\r\n                            <Draggable key={card.cardKey} draggableId={card.cardKey} index={index}>\r\n                                {(provided, snapshot) => (\r\n                                    <CardWrapper\r\n                                        key={card.cardKey}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        ref={provided.innerRef}\r\n                                        isDragging={snapshot.isDragging}\r\n                                    >\r\n                                        <Card \r\n                                            boardKey={boardKey}\r\n                                            listKey={listKey}\r\n                                            cardKey={card.cardKey}\r\n                                            cardName={card.content}\r\n                                            done={card.done}\r\n                                            functionSet={functionSet}\r\n                                        />\r\n                                        <CardButton onClick={()=>deleteCard(card.cardKey)}>\r\n                                            <i className={DELETE}></i>\r\n                                        </CardButton>\r\n                                    </CardWrapper>\r\n                                )}\r\n\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </ScrollView>\r\n                )}\r\n            </Droppable>\r\n            <CardAdder>\r\n                <CardInput type=\"text\" value={text} onChange={onChange} placeholder='Add a card..' />\r\n                <Button onClick={onSubmit}><i className={ADD}></i></Button>\r\n            </CardAdder>\r\n        </ListContainer>\r\n    );\r\n\r\n}\r\n\r\nconst ListContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    word-wrap: break-word;\r\n    word-break: break-word;\r\n`;\r\n\r\nconst CardWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    margin: 5px 0;\r\n    border-radius: 5px;\r\n    background-color: ${PALETTE[2]};\r\n    padding: 10px;\r\n    color: ${PALETTE[3]};\r\n    flex-grow: 1;\r\n`;\r\n\r\nconst ScrollView = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    justify-content: flex-start;\r\n    align-items: center;\r\n    max-height: 48vh;\r\n    overflow-y: auto;\r\n    min-height: 1px;\r\n`;\r\n\r\nconst CardAdder = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    width: 100%;\r\n    margin: 5px 0 10px 0;\r\n    background-color: ${PALETTE[0]};\r\n    padding: 10px;\r\n    color: white;\r\n`;\r\n\r\nconst CardInput = styled(Input)`\r\n    width: 100%;\r\n`;\r\n\r\nconst CardButton = styled(Button)`\r\n    &:hover{\r\n        color: ${PALETTE[0]};\r\n    }\r\n`;\r\n\r\nconst StyledEditable = styled(ContentEditable)`\r\n    padding: 10px;  \r\n    outline-color: ${PALETTE[3]};  \r\n`;\r\n\r\nconst ListTitle = styled.h4`\r\n    cursor: pointer;\r\n`;","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport List from './List';\r\nimport {Button, Input, ADD, DELETE, EMPTY} from '../routes/Home';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nexport default function Board({boardKey, boardName, listList, functionSet}) {\r\n    const [text, setText] = useState(\"\");\r\n    const createNewList = text => {\r\n        functionSet.create(boardKey, EMPTY, text);\r\n    };\r\n    const deleteList = (key) => {\r\n        const askDelete = window.confirm(\"Do you really want to remove the list?\");\r\n        if(askDelete) {\r\n            functionSet.remove(boardKey, key, EMPTY);\r\n        }\r\n    };\r\n    const onChange = e =>{\r\n        setText(e.target.value);\r\n    };\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        createNewList(text);\r\n        setText(\"\");\r\n    };\r\n    const onDragEnd = result => {\r\n        const { destination, source, type } = result;\r\n        if(!destination){\r\n            return;\r\n        }\r\n        if(destination.droppableId===source.droppableId && destination.index===source.index){\r\n            return;\r\n        }\r\n        if(type==='card'){\r\n            functionSet.switchIndex(boardKey, source.droppableId, destination.droppableId, source.index, destination.index);\r\n            return;\r\n        }\r\n        else if(type==='list'){\r\n            functionSet.switchIndex(boardKey, EMPTY, EMPTY, source.index, destination.index);\r\n            return;\r\n        }\r\n    };\r\n\r\n    return(\r\n        <BoardContainer>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"lists\" direction=\"horizontal\" type=\"list\">\r\n                    {(provided) => (\r\n                        <ListField\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            {listList.map((list, index) => (\r\n                                <Draggable key={list.listKey} draggableId={list.listKey} index={index}>\r\n                                    {(provided) => (\r\n                                        <ListWrapper\r\n                                            {...provided.draggableProps}\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.dragHandleProps}\r\n                                        >\r\n                                            <List\r\n                                                boardKey={boardKey} \r\n                                                listKey={list.listKey} \r\n                                                listName={list.listName} \r\n                                                cardList={list.cardList} \r\n                                                functionSet={functionSet}\r\n                                            />\r\n                                            <Button onClick={() => deleteList(list.listKey)}>\r\n                                                <i className={DELETE}></i>\r\n                                            </Button>\r\n                                        </ListWrapper>\r\n                                    )}\r\n                                </Draggable>        \r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </ListField>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n            <div>\r\n                <ListAdder>\r\n                    <ListInput type=\"text\" value={text} onChange={onChange} placeholder='Add a list..'/>\r\n                    <Button onClick={onSubmit}><i className={ADD}></i></Button>\r\n                </ListAdder>\r\n            </div>\r\n        </BoardContainer>\r\n    );\r\n\r\n}\r\n\r\nconst BoardContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    justify-content: flex-start;\r\n    align-items: flex-start;\r\n    padding: 0 10px;\r\n    overflow-x: auto;\r\n    flex-grow: 1;\r\n`;\r\n\r\nconst ListAdder = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin: 0 20px 0 10px;\r\n    border-radius: 10px;\r\n    background-color: white;\r\n    padding: 10px 10px 5px 10px;\r\n    width: 230px;\r\n`;\r\n\r\nconst ListWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin: 0 10px;\r\n    border-radius: 10px;\r\n    padding: 10px;\r\n    background-color: white;\r\n    min-width: 230px;\r\n    max-width: 230px;\r\n`;\r\n\r\nconst ListInput = styled(Input)`\r\n    margin-bottom: 5px;\r\n    text-align: center;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst ListField = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n`;","import React, {useState, useRef} from 'react';\r\nimport styled from 'styled-components';\r\nimport Board from '../components/Board';\r\nimport {Link} from 'react-router-dom';\r\nimport {PALETTE, EMPTY} from './Home';\r\nimport ContentEditable from 'react-contenteditable';\r\n\r\nexport default function BoardPage({location, history, boardList, functionSet}){\r\n    const board = location.state ? boardList.find(board => board.boardKey===location.state.key) : null;\r\n    const [nextBoardName, setNextBoardName] = useState(board ? board.boardName : null);\r\n    const nextBoardNameRef = useRef();\r\n    if(location.state===undefined){\r\n        history.push(\"/\");\r\n        return null;\r\n    }\r\n    const editBoardName = () => {\r\n        const nextBoardName = nextBoardNameRef.current.innerHTML;\r\n        if(!nextBoardName){\r\n            setNextBoardName(board.boardName);\r\n            return;\r\n        }\r\n        else functionSet.edit(location.state.key, EMPTY, EMPTY, nextBoardName);\r\n    };\r\n    const changeText = e => {\r\n        setNextBoardName(e.target.value);\r\n    }\r\n    const disableNewLines = e => {\r\n        const keyCode = e.keyCode || e.which;\r\n        if (keyCode === 13) {\r\n          e.returnValue = false;\r\n          if (e.preventDefault){\r\n              e.preventDefault();\r\n          }\r\n        }\r\n    }\r\n    return (\r\n        <BoardPageWrapper>\r\n            <Header>\r\n                {/* <BoardTitle>{location.state.name}</BoardTitle> */}\r\n                <BoardTitle>\r\n                    <StyledEditable\r\n                        innerRef={nextBoardNameRef}\r\n                        html={nextBoardName}\r\n                        disabled={false}\r\n                        onChange={changeText}\r\n                        onBlur={editBoardName}\r\n                        onKeyPress={disableNewLines}\r\n                        spellCheck='false'\r\n                    />\r\n                </BoardTitle>\r\n                <ToHome to={{pathname: '/'}}><i className=\"fas fa-home\"></i></ToHome>\r\n            </Header>\r\n            <Board \r\n                boardKey={location.state.key} \r\n                boardName={location.state.name} \r\n                listList={board.listList} \r\n                functionSet={functionSet}\r\n            />\r\n        </BoardPageWrapper>\r\n    );\r\n}\r\n\r\nconst BoardPageWrapper = styled.div`\r\n    display: flex;\r\n    flex-flow: column;\r\n    text-align: center;\r\n    min-height: 100vh;\r\n`;\r\n\r\nconst BoardTitle = styled.h1`\r\n    font-size: 30px;\r\n    margin: auto;\r\n    padding: 10px 20px;\r\n    color: ${PALETTE[3]};\r\n    cursor: pointer;\r\n`;\r\n\r\nconst StyledEditable = styled(ContentEditable)`\r\n    padding: 10px;\r\n    outline-color: ${PALETTE[3]};  \r\n`;\r\n\r\nconst ToHome = styled(Link)`\r\n    font-size: 30px;\r\n    color: ${PALETTE[3]};\r\n    &:hover{\r\n        color: ${PALETTE[2]};\r\n    }\r\n`;\r\n\r\nconst Header = styled.header`\r\n    display: flex;\r\n    margin-bottom: 20px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 10px 20px;\r\n    background-color: ${PALETTE[1]};\r\n`;\r\n","import React from 'react';\r\nimport { HashRouter, Route } from 'react-router-dom';\r\nimport { createGlobalStyle } from \"styled-components\";\r\nimport Home from './routes/Home';\r\nimport BoardPage from './routes/BoardPage';\r\n\r\nconst PALETTE = ['#E9ECE5', '#C0DFD9', '#B3C2BF', '#3B3A36'];\r\nconst EMPTY =  '---';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    *{\r\n      box-sizing: border-box;\r\n    }\r\n    body{\r\n        padding: 0;\r\n        margin: 0;\r\n        font-family: 'Lora', 'Noto Serif KR';\r\n        background-color: ${PALETTE[0]};\r\n    }\r\n    ::-webkit-scrollbar{\r\n      background: none;\r\n      height: 14px;\r\n    }\r\n    ::-webkit-scrollbar-track{\r\n      box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.2);\r\n      border-radius: 10px;\r\n    }\r\n    ::-webkit-scrollbar-thumb{\r\n      background: rgba(0, 0, 0, 0.15);\r\n      border-radius: 10px;\r\n    }\r\n`;\r\n\r\nfunction App() {\r\n    const [boardList, setBoardList] = React.useState(\r\n      JSON.parse(localStorage.getItem('localBoardList')) || []\r\n    );\r\n\r\n    React.useEffect(() => {\r\n      localStorage.setItem('localBoardList', JSON.stringify(boardList));\r\n    }, [boardList]);\r\n\r\n    const create = (boardKey, listKey, text) => {\r\n      if(boardKey===EMPTY){ //createBoard\r\n        const check = boardList.filter(board => board.boardName === text);\r\n        if(!check.length && text.length){\r\n            const newBoardList = boardList.concat([{boardKey: text.concat(Date.now()), boardName: text, listList: [], pin: false}]);\r\n            setBoardList(newBoardList);\r\n        } \r\n      }\r\n      else if(listKey===EMPTY){ //createList\r\n        const newBoardList = [...boardList];\r\n        newBoardList.forEach(board => {\r\n          if(board.boardKey===boardKey){\r\n            const check = board.listList.filter(list => list.listName === text);\r\n            if(!check.length && text.length){\r\n              board.listList.push({listKey: text.concat(Date.now()), listName: text, cardList: []});\r\n            }\r\n          }\r\n        });\r\n        setBoardList(newBoardList);\r\n      }\r\n      else{ //createCard\r\n        const newBoardList = [...boardList];\r\n        newBoardList.forEach(board => {\r\n          if(board.boardKey===boardKey){\r\n            board.listList.forEach(list => {\r\n              if(list.listKey===listKey){\r\n                if(text.length){\r\n                  list.cardList.push({cardKey: text.concat(Date.now()), cardName: text, done: false});\r\n                }\r\n              }\r\n            });\r\n          }\r\n        });\r\n        setBoardList(newBoardList);\r\n      } \r\n    };\r\n\r\n\r\n    const remove = (boardKey, listKey, cardKey) => {\r\n      if(boardKey===EMPTY){\r\n        return;\r\n      }\r\n      else{\r\n        if(listKey===EMPTY){ //removeBoard\r\n          const newBoardList = boardList.filter(board => board.boardKey !== boardKey);\r\n          setBoardList(newBoardList);   \r\n        }\r\n        else if(cardKey===EMPTY){ //removeList\r\n          const newBoardList = [...boardList];\r\n          newBoardList.forEach(board => {\r\n            if(board.boardKey===boardKey){\r\n              board.listList = board.listList.filter(list => list.listKey !== listKey);\r\n            }\r\n          });\r\n          setBoardList(newBoardList);\r\n          setBoardList(newBoardList);\r\n        }\r\n        else{ //removeCard\r\n          const newBoardList = [...boardList];\r\n          newBoardList.forEach(board => {\r\n            if(board.boardKey===boardKey){\r\n              board.listList.forEach(list => {\r\n                if(list.listKey===listKey){\r\n                  list.cardList = list.cardList.filter(card => card.cardKey !== cardKey);\r\n                }\r\n              });\r\n            }\r\n          });\r\n          setBoardList(newBoardList);\r\n        }\r\n      }\r\n    };\r\n\r\n    const edit = (boardKey, listKey, cardKey, text) => {\r\n      if(boardKey===EMPTY){\r\n        return;\r\n      }\r\n      else{\r\n        if(listKey===EMPTY){ //editBoard\r\n          const newBoardList = [...boardList];\r\n          newBoardList.forEach(board => {\r\n            if(board.boardKey===boardKey){\r\n              board.boardName = text;\r\n            }\r\n          });\r\n          setBoardList(newBoardList);   \r\n        }\r\n        else if(cardKey===EMPTY){ //editList\r\n          const newBoardList = [...boardList];\r\n          newBoardList.forEach(board => {\r\n            if(board.boardKey===boardKey){\r\n              board.listList.forEach(list => {\r\n                if(list.listKey===listKey){\r\n                  list.listName = text;\r\n                }\r\n              });\r\n            }\r\n          });\r\n          setBoardList(newBoardList);\r\n        }\r\n        else{ //editCard\r\n          const newBoardList = [...boardList];\r\n          newBoardList.forEach(board => {\r\n            if(board.boardKey===boardKey){\r\n              board.listList.forEach(list => {\r\n                if(list.listKey===listKey){\r\n                  list.cardList.forEach(card => {\r\n                    if(card.cardKey===cardKey){\r\n                      card.cardName = text;\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          });\r\n          setBoardList(newBoardList);\r\n        }\r\n      }\r\n    };\r\n\r\n    const togglePin = boardKey => {\r\n      const newBoardList = [...boardList];\r\n      newBoardList.forEach(board => {\r\n        if(board.boardKey===boardKey){\r\n          board.pin = !board.pin;\r\n        }\r\n      })\r\n      setBoardList(newBoardList);\r\n    }\r\n\r\n    const toggleDone = (boardKey, listKey, cardKey) => {\r\n      const newBoardList = [...boardList];\r\n      newBoardList.forEach(board => {\r\n        if(board.boardKey===boardKey){\r\n          board.listList.forEach(list => {\r\n            if(list.listKey===listKey){\r\n              list.cardList.forEach(card => {\r\n                if(card.cardKey===cardKey){\r\n                  card.done = !card.done;\r\n                }\r\n              });\r\n            }\r\n          });\r\n        }\r\n      });\r\n      setBoardList(newBoardList);\r\n    };\r\n\r\n    const switchIndex = (boardKey, startListKey, endListKey, startIndex, endIndex) => {\r\n      const newBoardList = [...boardList];\r\n      let dragCard = null;\r\n      let dragList = null;\r\n      if(startListKey !== EMPTY){\r\n        newBoardList.forEach(board => {\r\n          if(board.boardKey===boardKey){\r\n            board.listList.forEach(list => {\r\n              if(list.listKey===startListKey){\r\n                dragCard = list.cardList[startIndex];\r\n                list.cardList.splice(startIndex, 1);\r\n                if(startListKey===endListKey){\r\n                  list.cardList.splice(endIndex, 0, dragCard);\r\n                }\r\n                else{\r\n                  board.listList.forEach(list => {\r\n                    if(list.listKey===endListKey){\r\n                      list.cardList.splice(endIndex, 0, dragCard);\r\n                    }\r\n                  });\r\n                }\r\n              }\r\n            });\r\n          }\r\n        });\r\n        setBoardList(newBoardList);\r\n      }\r\n      else{\r\n        newBoardList.forEach(board => {\r\n          if(board.boardKey===boardKey){\r\n            dragList = board.listList[startIndex];\r\n            board.listList.splice(startIndex, 1);\r\n            board.listList.splice(endIndex, 0, dragList);\r\n          }\r\n        });\r\n        setBoardList(newBoardList);\r\n      }\r\n    };\r\n\r\n    const functionSet = {\r\n      create: create,\r\n      remove: remove,\r\n      edit: edit,\r\n      togglePin: togglePin,\r\n      toggleDone: toggleDone,\r\n      switchIndex: switchIndex,\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <GlobalStyle />\r\n            <HashRouter>\r\n              <Route path=\"/\" exact={true} render={props => <Home {...props} boardList={boardList} functionSet={functionSet} />} />\r\n              <Route path=\"/board/:boardName\" render={props => <BoardPage {...props} boardList={boardList} functionSet={functionSet}/>} />\r\n            </HashRouter>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}